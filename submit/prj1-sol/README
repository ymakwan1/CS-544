Name:		Yash Sanjay Makwana
B-Number:	B00974752
Email:		ymakwan1binghamton.edu

### Code Explanation

The provided code is a TypeScript module that implements a grading system for a course. It exports a function `makeGrades` and defines several classes and types used in the grading system.

## `makeGrades`

The `makeGrades` function is the default export of the module. It takes a `CourseInfo` object as a parameter and returns a `Grades` object. It serves as a factory function for creating instances of the `GradesImpl` class.

## `GradesImpl` Class

The `GradesImpl` class is the main class that represents the grading system. It implements both the `CourseObj` and `Grades` interfaces. The class has the following properties:

- `course`: A `CourseInfo` object that contains information about the course.
- `#colIds`: A `Set` that stores the column IDs in the grading system.
- `#rawRowsMap`: An object that maps row IDs to raw row data.
- `#fullTable`: A property that caches the full table containing all computed values.

The class provides several methods and private helper functions:

### `make` Method

The static `make` method is a factory method for creating instances of the `GradesImpl` class. It takes a `CourseInfo` object as a parameter and returns a `Grades` object.

### `constructor` Method

The private constructor method initializes the `GradesImpl` object. It takes optional parameters for `colIds` and `rawRowsMap` and sets the corresponding properties.

### `addColumn` Method

The `addColumn` method adds an empty column to the table. It takes a `colId` parameter and returns a `Result` object that either contains the updated `Grades` object or an error message. The method performs various checks to ensure the validity of the column ID and its kind (score or info) before adding it to the table.

### `patch` Method

The `patch` method applies patches to the table, returning the updated table. It takes a `patches` object as a parameter, which contains the row IDs and corresponding patch data. The method performs validation checks to ensure the patch data is valid and within the defined range. It returns a `Result` object that either contains the updated `Grades` object or an error message.

### `getFullTable` Method

The `getFullTable` method returns the full table containing all computed values. It calculates the columns and rows based on the raw data and caches the result for subsequent calls.

### `getRawTable` Method

The `getRawTable` method returns a raw table containing the raw data. It retrieves the values from the `#rawRowsMap` property and returns them as an array of objects.

### `upsertRow` Method

The `upsertRow` method inserts or replaces a row in the table and returns the updated table. It takes a `row` object as a parameter and performs various checks to ensure the validity of the row data, such as checking for unknown column IDs, calculated columns, missing ID column, and out-of-range score values. It returns a `Result` object that either contains the updated `Grades` object or an error message.

### Private Helper Methods

The class defines several private helper methods:

- `#patchValidation`: Performs validation checks on the patch data to ensure its validity. It checks for unknown row IDs, unknown column IDs, and out-of-range score values.
- `#calculateColumns`: Calculates the columns in the full table based on the raw data and the course information. It iterates over the raw rows, calculates the values for each column, and constructs the grade rows.
- `getColumn`: Helper function that extracts a specific column from an array of grade rows.

## Auxiliary Functions

The code also includes an auxiliary function `getColumn`, which extracts a specific column from an array of grade rows.

## Overall Functionality

The provided code implements a grading system that allows adding columns, applying patches, retrieving the full and raw tables, and upserting rows. It enforces various validation checks to ensure the integrity of the data and provides error messages when necessary. The `GradesImpl` class serves as the main interface for interacting with the grading system.
